{"name":"KVS","tagline":"Erlang Data Framework with Sequential Consistency","body":"KVS: Data Framework for KV Stores\r\n=================================\r\n\r\nOnline Presentation: http://slid.es/maximsokhatsky/kvs\r\n\r\nFeatures\r\n--------\r\n\r\n* Polymorphic Tuples\r\n* Managing Linked-Lists\r\n* Various Backends Support: KAI, Mnesia, Riak, CouchDB\r\n* Sequential Consistency via Feed Server\r\n* Basic Schema for Social Sites and Accounting\r\n* Extendable Schema\r\n* Supports Secondary Indexes for KAI, Mnesia and Riak\r\n* Change Backends on-the-fly\r\n* Supports Multiple backends at the same time\r\n* Xen Ready\r\n\r\nOverview\r\n--------\r\n\r\nThis is database handling application that hides database access\r\nand provides high-level rich API to stored and extend following data:\r\n\r\n* Acl\r\n* Users\r\n* Groups\r\n* Subscriptions\r\n* Feeds\r\n* Comments\r\n* Meetings\r\n* Accounts\r\n* Payments\r\n* Products\r\n* Purchases\r\n\r\nThis Framework provides also a Plugin for Feed Server for sequential consistency.\r\nAll write requests with given object keys will be handled by single processes\r\nin Feed Server so you may not worry about concurrent changes of user feeds.\r\n\r\nAll write operations that are made to data with secondary indexes,\r\ni.e. not like linked lists could be potentially handled without feed_server.\r\nBut some KV storages are not supporting secondary indexes add those backends carefully.\r\n\r\nStore Backends\r\n--------------\r\n\r\nCurrently kvs includes following store backends:\r\n\r\n* Mnesia\r\n* Riak\r\n* KAI\r\n\r\nConfiguring\r\n-----------\r\n\r\nFirst of all you need to tune your backend in the kvs application:\r\n\r\n    {kvs, {dba,store_kai}},\r\n\r\nTry to check it:\r\n\r\n    1> kvs:config(dba).\r\n    store_kai\r\n    2> kvs:version().\r\n    {version,\"KVS KAI PURE XEN\"}\r\n\r\nCreate database for single node:\r\n\r\n    3> kvs:join().\r\n\r\nCreate database joining to existing cluster:\r\n\r\n    3> kvs:join('kvs@synrc.com').\r\n\r\nCheck table packages included into the schema:\r\n\r\n    4> kvs:dir().\r\n    [kvs_user,kvs_product,kvs_membership,kvs_payment,kvs_feed,\r\n     kvs_acl,kvs_account,kvs_group]\r\n\r\nOperations\r\n----------\r\n\r\nTry to add some data:\r\n\r\n    1> rr(kvs).\r\n    2> kvs:put(#user{id=\"maxim@synrc.com\"}).\r\n    ok\r\n    3> kvs:get(user,\"maxim@synrc.com\").\r\n    #user{id = \"maxim@synrc.com\",container = feed,...}\r\n    4> kvs:put(#user{id=\"doxtop@synrc.com\"}).\r\n    5> length(kvs:all(user)).\r\n    2\r\n\r\nPolymorphic Records\r\n-------------------\r\n\r\nThe data in KVS represented as plain Erlang records. The first element of the tuple\r\nas usual indicates the name of bucket. And the second element usually corresponds\r\nto the index key field. Additional secondary indexes could be applied for stores\r\nthat supports 2i, e.g. kai, mnesia, riak.\r\n\r\n    1 record_name -- user, groups, acl, etc... table name -- element(1, Rec).\r\n    2 id          -- index key -- element(2, Rec).\r\n\r\nIterators\r\n---------\r\n\r\nAll record could be chained into the double-linked lists in the database.\r\nSo you can inherit from the ITERATOR record just like that:\r\n\r\n    -record(acl_entry, {?ITERATOR(acl),\r\n        entry_id,\r\n        acl_id,\r\n        accessor,\r\n        action}).\r\n\r\nThe layout of iterators are following:\r\n\r\n    1 record_name -- table name, like\r\n    2 id          -- index key\r\n    3 container   -- container name\r\n    4 feed_id     -- feed id\r\n    5 prev        -- poniter to previous object in list\r\n    6 next        -- next\r\n    7 feeds       -- subfeeds\r\n    8 guard,      -- aux field\r\n    9 ...\r\n\r\nThis means your table will support add/remove operations to lists.\r\n\r\n    1> kvs:add(#user{id=\"mes@ua.fm\"}).\r\n    2> kvs:add(#user{id=\"dox@ua.fm\"}).\r\n    \r\nRead the chain (undefined means all)\r\n    \r\n    3> kvs:entries(kvs:get(feed, users), user, undefined).\r\n    [#user{id=\"mes@ua.fm\"},#user{id=\"dox@ua.fm\"}]\r\n    \r\nRead flat values by all keys from table:\r\n\r\n    4> kvs:all(user).\r\n    [#user{id=\"mes@ua.fm\"},#user{id=\"dox@ua.fm\"}]\r\n\r\nContainers\r\n----------\r\n\r\nIf you are using iterators records this automatically means you are using containers.\r\nContainers are just boxes for storing top/heads of the linked lists. Here is layout\r\nof containers:\r\n\r\n    1 record_name   -- container name\r\n    2 id            -- unique id\r\n    3 top           -- pointer to the list's head\r\n    4 entries_count -- number of elements in list\r\n\r\nExtending Schema\r\n----------------\r\n\r\nUsually you need only specify custom mnesia indexes and tables tuning.\r\nRiak and KAI backends don't need it. Group you table into table packages\r\nrepresented as modules with handle_notice API.\r\n\r\n    -module(kvs_box).\r\n    -inclue_lib(\"kvs/include/kvs.hrl\").\r\n    -record(box,{id,user,email}).\r\n    -record(box_subscription,{who,whom}).\r\n    init(Backend=store_mnesia) ->\r\n        ?CREATE_TAB(box),\r\n        ?CREATE_TAB(box_subscription),\r\n        Backend:add_table_index(box, user),\r\n        Backend:add_table_index(box, email),\r\n        Backend:add_table_index(box_subscription, who),\r\n        Backend:add_table_index(box_subscription, whom);\r\n    init(_) -> ok.\r\n\r\nAnd plug it into schema config:\r\n\r\n    {kvs, {schema,[kvs_user,kvs_acl,kvs_account,...,kvs_box]}},\r\n\r\nAnd on database init\r\n\r\n    1> kvs:join().\r\n\r\nIt will create your custom schema.\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky\r\n* Andrii Zadorozhnii\r\n* Vladimir Kirillov\r\n* Alex Kalenuk\r\n* Sergey Polkovnikov\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}